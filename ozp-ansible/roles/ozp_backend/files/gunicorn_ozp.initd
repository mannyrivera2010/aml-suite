#! /bin/bash
### BEGIN INIT INFO
# Provides:          yourapp
# Required-Start:    nginx
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: The main django process
# Description:       The gunicorn process that receives HTTP requests
#                    from nginx
#
### END INIT INFO
#
# Author:       mle <geobi@makina-corpus.net>
#
APPNAME=ozp
USER=ozp
NGINX_USER=nginx
PYTHON_ENV=/usr/local/ozp/python-env
ACTIVATE=$PYTHON_ENV/bin/activate
PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:$PYTHON_ENV/bin
APPDIR=/usr/local/ozp/backend
NGINX_STATIC=/usr/local/ozp/frontend/django_static
APPMODULE=ozp.wsgi:application
DAEMON=gunicorn
BIND=0.0.0.0:4433
PIDFILE=/usr/local/ozp/gunicorn_ozp.pid
LOGFILE=/usr/local/ozp/gunicorn_ozp.log
DJANGO_LOGFILE=/usr/local/ozp/ozp.log
WORKERS=2

# Source function library
. /etc/init.d/functions

# Go to source directory
cd $APPDIR

if [ -e "/etc/default/$APPNAME" ]
then
    . /etc/default/$APPNAME
fi

# test if $USER exists
user_exists=$(id -u $USER > /dev/null 2>&1; echo $?)
if [ $user_exists -eq 1 ]; then
   echo "error user $USER does not exist"
   failure
   exit $?
fi

start() {
	if [ -f $PIDFILE ]; then
	    PID=`cat $PIDFILE`
	    echo "$APPNAME already running: $PID"
	    failure
	    exit 2;
	fi
        echo -n "Starting $APPNAME"
        source $ACTIVATE
        sudo touch $LOGFILE
        sudo chown $USER $LOGFILE
        sudo touch $DJANGO_LOGFILE
        sudo chown $USER $DJANGO_LOGFILE
        cd $APPDIR
	cmd="$DAEMON --daemon --bind=$BIND --pid=$PIDFILE --workers=$WORKERS --user=$USER --log-file=$LOGFILE --keyfile /usr/local/ozp/server_certs/private/server.key --certfile /usr/local/ozp/server_certs/server.crt --ca-certs /usr/local/ozp/ca_certs/rootCA.pem $APPMODULE"
	echo "Running gunicorn as: $cmd"
    su - $USER -c "cd $APPDIR; source $ACTIVATE; $cmd"
	if [ $? -eq 0 ]; then
	   # TODO: this doesn't guarantee success
	   success
	   return $?
	else
	  failure
          echo "failure"
          return $?
	fi
}

stop() {
        echo -n "Shutting down $APPNAME: "
        killproc -p $PIDFILE $DAEMON
        # kill -9 $(cat $PIDFILE)
        # rm -f $PIDFILE
	return $?
}

rh_status() {
    status $(cat $PIDFILE)
}

reload() {
  kill -HUP $(cat $PIDFILE)
  return $?
}

reinstall() {
 PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:$PYTHON_ENV/bin
 cd $APPDIR
 echo "Redeploying code"
 # remove old python env
 rm -rf $PYTHON_ENV
 # create new virtualenv
 mkdir -p $PYTHON_ENV
 pyvenv-3.4 $PYTHON_ENV
 source $ACTIVATE
 # install dependencies
 pip install --no-index --find-links=wheelhouse -r requirements.txt
 # remove old static files
 rm -rf static
 mkdir static
 # collect static files
 python manage.py collectstatic --noinput
 # copy static files to nginx directory
 cp -r static/* $NGINX_STATIC
 # fix ownership
 sudo chown -R $NGINX_USER $NGINX_STATIC
 sudo chown -R $USER /usr/local/ozp/media
 sudo chown -R $USER $PYTHON_ENV
 return $?
}

flushdb() {
    PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:$PYTHON_ENV/bin
    source $ACTIVATE
    cd $APPDIR
    # reset indexes
    # python manage.py sqlsequencereset ozpcenter > /tmp/tmp.sql
    # /usr/local/pgsql/bin/psql -U postgres -d ozp -a -f /tmp/tmp.sql
    # python manage.py sqlsequencereset ozpiwc > /tmp/tmp.sql
    # /usr/local/pgsql/bin/psql -U postgres -d ozp -a -f /tmp/tmp.sql
    # rm /tmp/tmp.sql
    # create new database with a single new migration
    python manage.py flush --noinput
    python manage.py makemigrations ozpcenter
    python manage.py makemigrations ozpiwc
    python manage.py migrate

    # load sample data
    python manage.py runscript sample_data_generator
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        rh_status
        ;;
    restart)
        stop
        start
        ;;
    reload)
        reload
        ;;
    redeploy)
        stop
	   reinstall
	   start
	   ;;
    nuke)
        stop
        reinstall
        flushdb
        start
    ;;
    *)
        echo "Usage: $APPNAME {start|stop|status|reload|restart|redeploy|nuke"
        exit 1
        ;;
esac
exit $?
