# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2018-09-11 16:06
from __future__ import unicode_literals

import amlcenter.utils
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True)),
                ('short_name', models.CharField(max_length=32, unique=True)),
            ],
            options={
                'verbose_name_plural': 'agencies',
            },
        ),
        migrations.CreateModel(
            name='ApplicationLibraryEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('folder', models.CharField(blank=True, max_length=255, null=True)),
                ('position', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'application library entries',
            },
        ),
        migrations.CreateModel(
            name='BookmarkEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('created_date', models.DateTimeField(default=amlcenter.utils.get_now_utc)),
                ('modified_date', models.DateTimeField(default=amlcenter.utils.get_now_utc)),
                ('is_root', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=False)),
                ('type', models.CharField(choices=[('FOLDER', 'FOLDER'), ('LISTING', 'LISTING')], default='FOLDER', max_length=255)),
                ('bookmark_parent', models.ManyToManyField(db_table='bookmark_parents', to='amlcenter.BookmarkEntry')),
            ],
        ),
        migrations.CreateModel(
            name='BookmarkPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(default=amlcenter.utils.get_now_utc)),
                ('modified_date', models.DateTimeField(default=amlcenter.utils.get_now_utc)),
                ('user_type', models.CharField(choices=[('OWNER', 'OWNER'), ('VIEWER', 'VIEWER')], default='VIEWER', max_length=255)),
                ('bookmark', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmark_permission', to='amlcenter.BookmarkEntry')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'verbose_name_plural': 'categories',
            },
        ),
        migrations.CreateModel(
            name='ChangeDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=255)),
                ('old_value', models.CharField(blank=True, max_length=4000, null=True)),
                ('new_value', models.CharField(blank=True, max_length=4000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('secure_phone', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(code='invalid phone number', message='secure_phone must be a valid phone number', regex='\\d')])),
                ('unsecure_phone', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(code='invalid phone number', message='unsecure_phone must be a valid phone number', regex='\\d')])),
                ('email', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(code='invalid email', message='email must be a valid address', regex='\\w')])),
                ('name', models.CharField(max_length=100)),
                ('organization', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ContactType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('required', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='DocUrl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('url', models.CharField(max_length=2083, validators=[django.core.validators.RegexValidator(code='invalid url', message='url must be a url', regex='^(https|http|ftp|sftp|file)://.*$')])),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(max_length=36, unique=True)),
                ('security_marking', models.CharField(max_length=1024)),
                ('file_extension', models.CharField(default='png', max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name='ImageType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('small_icon', 'small_icon'), ('large_icon', 'large_icon'), ('banner_icon', 'banner_icon'), ('large_banner_icon', 'large_banner_icon'), ('small_screenshot', 'small_screenshot'), ('large_screenshot', 'large_screenshot')], max_length=64, unique=True)),
                ('max_size_bytes', models.IntegerField(default=1048576)),
                ('max_width', models.IntegerField(default=2048)),
                ('max_height', models.IntegerField(default=2048)),
                ('min_width', models.IntegerField(default=16)),
                ('min_height', models.IntegerField(default=16)),
            ],
        ),
        migrations.CreateModel(
            name='Intent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=64, validators=[django.core.validators.RegexValidator(code='invalid action', message='action must be a valid action', regex='\\w')])),
                ('media_type', models.CharField(max_length=129, validators=[django.core.validators.RegexValidator(code='invalid type', message='type must be a valid media type', regex='\\w')])),
                ('label', models.CharField(max_length=255)),
                ('icon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intent', to='amlcenter.Image')),
            ],
        ),
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('approved_date', models.DateTimeField(blank=True, null=True)),
                ('edited_date', models.DateTimeField(default=amlcenter.utils.get_now_utc)),
                ('featured_date', models.DateTimeField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=8192, null=True)),
                ('launch_url', models.CharField(blank=True, max_length=2083, null=True, validators=[django.core.validators.RegexValidator(code='invalid url', message='launch_url must be a url', regex='^(https|http|ftp|sftp|file)://.*$')])),
                ('version_name', models.CharField(blank=True, max_length=255, null=True)),
                ('unique_name', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('what_is_new', models.CharField(blank=True, max_length=255, null=True)),
                ('description_short', models.CharField(blank=True, max_length=150, null=True)),
                ('usage_requirements', models.CharField(blank=True, max_length=1000, null=True)),
                ('system_requirements', models.CharField(blank=True, max_length=1000, null=True)),
                ('approval_status', models.CharField(choices=[('IN_PROGRESS', 'IN_PROGRESS'), ('PENDING', 'PENDING'), ('APPROVED_ORG', 'APPROVED_ORG'), ('APPROVED', 'APPROVED'), ('REJECTED', 'REJECTED'), ('DELETED', 'DELETED'), ('PENDING_DELETION', 'PENDING_DELETION')], default='IN_PROGRESS', max_length=255)),
                ('is_enabled', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('is_508_compliant', models.BooleanField(default=False)),
                ('avg_rate', models.FloatField(default=0.0)),
                ('total_votes', models.IntegerField(default=0)),
                ('total_rate5', models.IntegerField(default=0)),
                ('total_rate4', models.IntegerField(default=0)),
                ('total_rate3', models.IntegerField(default=0)),
                ('total_rate2', models.IntegerField(default=0)),
                ('total_rate1', models.IntegerField(default=0)),
                ('total_reviews', models.IntegerField(default=0)),
                ('total_review_responses', models.IntegerField(default=0)),
                ('feedback_score', models.IntegerField(default=0)),
                ('iframe_compatible', models.BooleanField(default=True)),
                ('security_marking', models.CharField(blank=True, max_length=1024, null=True)),
                ('is_private', models.BooleanField(default=False)),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listings', to='amlcenter.Agency')),
                ('banner_icon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listing_banner_icon', to='amlcenter.Image')),
                ('categories', models.ManyToManyField(db_table='category_listing', related_name='listings', to='amlcenter.Category')),
                ('contacts', models.ManyToManyField(db_table='contact_listing', related_name='listings', to='amlcenter.Contact')),
            ],
        ),
        migrations.CreateModel(
            name='ListingActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('CREATED', 'CREATED'), ('MODIFIED', 'MODIFIED'), ('SUBMITTED', 'SUBMITTED'), ('APPROVED_ORG', 'APPROVED_ORG'), ('APPROVED', 'APPROVED'), ('REJECTED', 'REJECTED'), ('ENABLED', 'ENABLED'), ('DISABLED', 'DISABLED'), ('DELETED', 'DELETED'), ('REVIEWED', 'REVIEWED'), ('REVIEW_EDITED', 'REVIEW_EDITED'), ('REVIEW_DELETED', 'REVIEW_DELETED'), ('PENDING_DELETION', 'PENDING_DELETION')], max_length=128)),
                ('activity_date', models.DateTimeField(default=amlcenter.utils.get_now_utc)),
                ('description', models.CharField(blank=True, max_length=2000, null=True)),
            ],
            options={
                'verbose_name_plural': 'listing activities',
            },
        ),
        migrations.CreateModel(
            name='ListingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True)),
                ('description', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='ListingVisitCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(default=0)),
                ('last_visit_date', models.DateTimeField(default=amlcenter.utils.get_now_utc)),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listing_visit_counts', to='amlcenter.Listing')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(default=amlcenter.utils.get_now_utc)),
                ('message', models.CharField(max_length=4096)),
                ('expires_date', models.DateTimeField()),
                ('_peer', models.CharField(blank=True, db_column='peer', max_length=4096, null=True)),
                ('notification_type', models.CharField(choices=[('system', 'system'), ('agency', 'agency'), ('agency_bookmark', 'agency_bookmark'), ('listing', 'listing'), ('peer', 'peer'), ('peer_bookmark', 'peer_bookmark'), ('restore_bookmark', 'restore_bookmark'), ('subscription', 'subscription')], default='system', max_length=24)),
                ('notification_subtype', models.CharField(choices=[('listing_new', 'listing_new'), ('listing_review', 'listing_review'), ('listing_private_status', 'listing_private_status'), ('pending_deletion_to_owner', 'pending_deletion__to_owner'), ('pending_deletion_to_steward', 'pending_deletion_to_steward'), ('pending_deletion_approved', 'pending_deletion_approved'), ('review_request', 'review_request'), ('subscription_category', 'subscription_category'), ('subscription_tag', 'subscription_tag')], default='system', max_length=36, null=True)),
                ('group_target', models.CharField(choices=[('all', 'all'), ('stewards', 'stewards'), ('app_steward', 'app_steward'), ('org_steward', 'org_steward'), ('user', 'user'), ('owner', 'owner')], default='all', max_length=24)),
                ('entity_id', models.IntegerField(blank=True, db_index=True, default=None, null=True)),
                ('agency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agency_notifications', to='amlcenter.Agency')),
            ],
        ),
        migrations.CreateModel(
            name='NotificationMailBox',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emailed_status', models.BooleanField(default=False)),
                ('read_status', models.BooleanField(default=False)),
                ('acknowledged_status', models.BooleanField(default=False)),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mailbox_notifications', to='amlcenter.Notification')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(max_length=255)),
                ('bio', models.CharField(blank=True, max_length=1000)),
                ('dn', models.CharField(max_length=1000, unique=True)),
                ('issuer_dn', models.CharField(blank=True, max_length=1000, null=True)),
                ('auth_expires', models.DateTimeField(default=amlcenter.utils.get_now_utc)),
                ('access_control', models.CharField(max_length=16384)),
                ('center_tour_flag', models.BooleanField(default=True)),
                ('hud_tour_flag', models.BooleanField(default=True)),
                ('webtop_tour_flag', models.BooleanField(default=True)),
                ('email_notification_flag', models.BooleanField(default=True)),
                ('listing_notification_flag', models.BooleanField(default=True)),
                ('subscription_notification_flag', models.BooleanField(default=True)),
                ('leaving_aml_warning_flag', models.BooleanField(default=True)),
                ('only_508_search_flag', models.BooleanField(default=False)),
                ('theme', models.CharField(default='default', max_length=255)),
                ('avatar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profile_avatar', to='amlcenter.Image')),
                ('organizations', models.ManyToManyField(db_table='agency_profile', related_name='profiles', to='amlcenter.Agency')),
                ('stewarded_organizations', models.ManyToManyField(blank=True, db_table='stewarded_agency_profile', related_name='stewarded_profiles', to='amlcenter.Agency')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RecommendationFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback', models.IntegerField(default=0)),
                ('target_listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_feedback_listing', to='amlcenter.Listing')),
                ('target_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_feedback_profile', to='amlcenter.Profile')),
            ],
            options={
                'verbose_name_plural': 'recommendation feedback',
            },
        ),
        migrations.CreateModel(
            name='RecommendationsEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_data', models.BinaryField(default=None)),
                ('target_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations_profile', to='amlcenter.Profile')),
            ],
            options={
                'verbose_name_plural': 'recommendations entries',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(blank=True, max_length=4000, null=True)),
                ('rate', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('edited_date', models.DateTimeField(default=amlcenter.utils.get_now_utc)),
                ('created_date', models.DateTimeField(default=amlcenter.utils.get_now_utc)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='amlcenter.Profile')),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='amlcenter.Listing')),
                ('review_parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='amlcenter.Review')),
            ],
        ),
        migrations.CreateModel(
            name='Screenshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0, null=True)),
                ('description', models.CharField(blank=True, max_length=160, null=True)),
                ('large_image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='screenshot_large', to='amlcenter.Image')),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='screenshots', to='amlcenter.Listing')),
                ('small_image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='screenshot_small', to='amlcenter.Image')),
            ],
        ),
        migrations.CreateModel(
            name='StorefrontCustomization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section', models.CharField(choices=[('FEATURED', 'FEATURED'), ('RECOMMENDED', 'RECOMMENDED'), ('RECENTLY_ADDED', 'RECENTLY_ADDED'), ('MOST_POPULAR', 'MOST_POPULAR'), ('FREQUENTLY_VISITED', 'FREQUENTLY_VISITED'), ('UPDATES', 'UPDATES'), ('MY_LISTINGS', 'MY_LISTINGS')], max_length=50)),
                ('position', models.PositiveIntegerField(default=0)),
                ('is_hidden', models.BooleanField(default=False)),
                ('size', models.CharField(blank=True, choices=[('LARGE', 'LARGE'), ('SMALL', 'SMALL')], max_length=50, null=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='storefront_customizations', to='amlcenter.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_type', models.CharField(choices=[('category', 'category'), ('tag', 'tag')], db_index=True, default=None, max_length=12)),
                ('entity_id', models.IntegerField(db_index=True, default=None)),
                ('target_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_profiles', to='amlcenter.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='WorkRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
            ],
        ),
        migrations.AddField(
            model_name='profile',
            name='work_roles',
            field=models.ManyToManyField(db_table='work_role_profile', related_name='profiles', to='amlcenter.WorkRole'),
        ),
        migrations.AddField(
            model_name='notificationmailbox',
            name='target_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mailbox_profiles', to='amlcenter.Profile'),
        ),
        migrations.AddField(
            model_name='notification',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authored_notifications', to='amlcenter.Profile'),
        ),
        migrations.AddField(
            model_name='notification',
            name='dismissed_by',
            field=models.ManyToManyField(db_table='notification_profile', related_name='dismissed_notifications', to='amlcenter.Profile'),
        ),
        migrations.AddField(
            model_name='notification',
            name='listing',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='amlcenter.Listing'),
        ),
        migrations.AddField(
            model_name='listingvisitcount',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listing_visit_counts', to='amlcenter.Profile'),
        ),
        migrations.AddField(
            model_name='listingactivity',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listing_activities', to='amlcenter.Profile'),
        ),
        migrations.AddField(
            model_name='listingactivity',
            name='change_details',
            field=models.ManyToManyField(db_table='listing_activity_change_detail', related_name='listing_activity', to='amlcenter.ChangeDetail'),
        ),
        migrations.AddField(
            model_name='listingactivity',
            name='listing',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listing_activities', to='amlcenter.Listing'),
        ),
        migrations.AddField(
            model_name='listing',
            name='current_rejection',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='amlcenter.ListingActivity'),
        ),
        migrations.AddField(
            model_name='listing',
            name='intents',
            field=models.ManyToManyField(db_table='intent_listing', related_name='listings', to='amlcenter.Intent'),
        ),
        migrations.AddField(
            model_name='listing',
            name='large_banner_icon',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listing_large_banner_icon', to='amlcenter.Image'),
        ),
        migrations.AddField(
            model_name='listing',
            name='large_icon',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listing_large_icon', to='amlcenter.Image'),
        ),
        migrations.AddField(
            model_name='listing',
            name='last_activity',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='amlcenter.ListingActivity'),
        ),
        migrations.AddField(
            model_name='listing',
            name='listing_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listings', to='amlcenter.ListingType'),
        ),
        migrations.AddField(
            model_name='listing',
            name='owners',
            field=models.ManyToManyField(db_table='profile_listing', related_name='owned_listings', to='amlcenter.Profile'),
        ),
        migrations.AddField(
            model_name='listing',
            name='required_listings',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='amlcenter.Listing'),
        ),
        migrations.AddField(
            model_name='listing',
            name='small_icon',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listing_small_icon', to='amlcenter.Image'),
        ),
        migrations.AddField(
            model_name='listing',
            name='tags',
            field=models.ManyToManyField(db_table='tag_listing', related_name='listings', to='amlcenter.Tag'),
        ),
        migrations.AddField(
            model_name='image',
            name='image_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='amlcenter.ImageType'),
        ),
        migrations.AddField(
            model_name='docurl',
            name='listing',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doc_urls', to='amlcenter.Listing'),
        ),
        migrations.AddField(
            model_name='contact',
            name='contact_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='amlcenter.ContactType'),
        ),
        migrations.AddField(
            model_name='bookmarkpermission',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlcenter.Profile'),
        ),
        migrations.AddField(
            model_name='bookmarkentry',
            name='creator_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlcenter.Profile'),
        ),
        migrations.AddField(
            model_name='bookmarkentry',
            name='listing',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listing_entries', to='amlcenter.Listing'),
        ),
        migrations.AddField(
            model_name='applicationlibraryentry',
            name='listing',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='application_library_entries', to='amlcenter.Listing'),
        ),
        migrations.AddField(
            model_name='applicationlibraryentry',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='application_library_entries', to='amlcenter.Profile'),
        ),
        migrations.AddField(
            model_name='agency',
            name='icon',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agency', to='amlcenter.Image'),
        ),
        migrations.AlterUniqueTogether(
            name='storefrontcustomization',
            unique_together=set([('profile', 'section')]),
        ),
        migrations.AddIndex(
            model_name='bookmarkpermission',
            index=models.Index(fields=['bookmark', 'profile'], name='amlcenter_b_bookmar_b8355b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='bookmarkpermission',
            unique_together=set([('bookmark', 'profile')]),
        ),
    ]
